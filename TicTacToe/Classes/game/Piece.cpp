#include "Piece.h"

#define ROW_NUM 3
#define COL_NUM 3

USING_NS_CC;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Piece * Piece::createWithSpriteFrame(cocos2d::SpriteFrame * i_spriteFrame)
{
	Piece *sprite = new (std::nothrow) Piece();
	if (sprite && i_spriteFrame && sprite->initWithSpriteFrame(i_spriteFrame))
	{
		sprite->autorelease();
		return sprite;
	}
	CC_SAFE_DELETE(sprite);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Piece * Piece::createWithSpriteFrameName(const std::string & i_spriteFrameName)
{
	SpriteFrame *frame = SpriteFrameCache::getInstance()->getSpriteFrameByName(i_spriteFrameName);

#if COCOS2D_DEBUG > 0
	char msg[256] = { 0 };
	sprintf(msg, "Invalid spriteFrameName: %s", i_spriteFrameName.c_str());
	CCASSERT(frame != nullptr, msg);
#endif

	return createWithSpriteFrame(frame);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Piece::Type Piece::getPieceType() const
{
	return m_type;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Piece::setPieceType(const Type i_type)
{
	m_type = i_type;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

cocos2d::Vec2 Piece::getGridPosition() const
{
	return m_gridPosition;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Piece::setGridPosition(const cocos2d::Vec2 i_pos)
{
	m_gridPosition = i_pos;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
